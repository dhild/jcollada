/*
 * Copyright (c) 2014 D. Ryan Hild <d.ryan.hild@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

configurations {
    hk2Generator {
        extendsFrom compile
    }
}

dependencies {
    compile project(':jcollada-spi')

    compile "xmlpull:xmlpull:${xmlpullVersion}"
    compile "org.glassfish.hk2:hk2:${hk2Version}"
    compile "net.sf.trove4j:trove4j:${troveVersion}"

    hk2Generator "org.glassfish.hk2:hk2-inhabitant-generator:${hk2Version}"

    provided "net.sf.kxml:kxml2:2.2.2"
    testCompile "org.glassfish.hk2:hk2-testng:${hk2Version}"
    testCompile "org.testng:testng:${testngVersion}"
    testCompile "org.uncommons:reportng:$reportngVersion"
    testCompile "org.assertj:assertj-core:${assertjVersion}"
    testCompile "org.mockito:mockito-all:${mockitoVersion}"
    // known issue with TestNG and ReportNG: explicitly add Guice
    testCompile "com.google.inject:guice:3.0"
}

task(generateHK2, type: JavaExec) {
    outputs.dir "${buildDir}/generated/hk2"
    inputs.dir sourceSets.main.output.classesDir
    dependsOn compileJava, processResources

    classpath configurations.hk2Generator

    args "--locator", "JCollada-Schema-1.4",
            "--directory", "${buildDir}/generated/hk2/META-INF/hk2-locator",
            "--file", sourceSets.main.output.classesDir.path

    main "org.jvnet.hk2.generator.HabitatGenerator"
}

task copyHK2Test(type: org.gradle.api.tasks.Copy) {
    dependsOn processTestResources
    from "${buildDir}/generated/hk2"
    into sourceSets.test.output.resourcesDir
}

// Due to a bug in the HK2 code, the services do not get populated correctly when using named locators.
task copyHK2TestDefaults(type: org.gradle.api.tasks.Copy) {
    dependsOn processTestResources
    from "${buildDir}/generated/hk2"
    into sourceSets.test.output.resourcesDir
    rename "JCollada-Schema-1.4", "default"
}

tasks.withType(Test) {
    useTestNG() {
        suiteXmlBuilder().suite(name: 'jcollada', parallel: 'tests') {
            test(name: 'all-tests') {
                packages {
                    'package'(name: 'net.dryanhild.collada.*')
                }
            }
        }
    }
    options {
        listeners << 'org.uncommons.reportng.HTMLReporter'
        listeners << 'org.testng.reporters.XMLReporter'
    }
    ext.useDefaultListeners = true
    ext.workingDirectory = 'build/'
}

test.dependsOn copyHK2Test, copyHK2TestDefaults

jar {
    dependsOn generateHK2
    from {
        files("${buildDir}/generated/hk2") {
            filter {
                it.name.contains("default")
            }
        }
    }
    manifest {
        attributes("Implementation-Title": "JCollada for Collada Schema 1.4",
                   "Implementation-Version": "$version",
                   "Implementation-Vendor": "D. Ryan Hild",
                   "Specification-Title": "JCollada SPI",
                   "Specification-Version": "$version",
                   "Specification-Vendor": "D. Ryan Hild")
    }
}
